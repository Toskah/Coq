Definition Alphabet := Set.
(* Definition 7.1.1 page 162 MIT notes *)
Inductive String : Type :=
| empty : String
| pair : Alphabet -> String -> String.
(* Definition 7.1.2 page 162 MIT notes *)
Fixpoint len (s : String) : nat :=
match s with
| empty => 0
| pair a s => 1 + len s
end.
(* Definition 7.1.3 page 163 MIT notes *)
Fixpoint concat (s t : String) : String :=
match s with
| empty => t
| pair a s => pair a (concat s t)
end.


(******** TASK 2 ******************)

Theorem Prob71 : forall r s t : String,
concat (concat r s) t = concat r (concat s t).
Proof.
induction r.
intros.
reflexivity.
intros.
simpl.
rewrite IHr.
reflexivity.
Qed.

(****** TASK 3 *********************)
Lemma concatEmpty : forall s : String, concat s empty = s.
Proof.
induction s.
intros.
reflexivity.
simpl.
rewrite IHs.
reflexivity.
Qed.

Fixpoint reverse (s : String) : String :=
match s with
| empty    => empty
| pair a s => concat (reverse s) (pair a empty)
end.



(* Problem 7.2 page 176 MIT notes *)
Theorem Prob72 : forall s t : String,
reverse (concat s t) = concat (reverse t) (reverse s).
Proof.
induction s.
simpl.
intro.
rewrite concatEmpty.
reflexivity.

induction t.
simpl.
rewrite concatEmpty.
reflexivity.

simpl.
rewrite IHs.
rewrite Prob71.
simpl.
reflexivity.

Qed.

