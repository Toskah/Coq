Inductive Alphabet : Set :=
| b: Alphabet
| c: Alphabet.
(* Definition 7.1.1 page 162 MIT notes *)
Inductive String : Type :=
| empty : String
| pair  : Alphabet -> String -> String.
(* Definition 7.1.3 page 163 MIT notes *)
Fixpoint concat (s t : String) : String :=
match s with
| empty    => t
| pair a s => pair a (concat s t)
end.
(* Definition 7.1.5 page 164 MIT notes *)
Fixpoint occurrences_c (s : String) : nat :=
match s with
| empty    => 0
| pair c s => 1 + occurrences_c s
| pair b s => occurrences_c s
end.
(* Lemma 7.1.6 page 165 MIT notes *)
Lemma Lem716 : forall s t : String,
occurrences_c (concat s t) =
(occurrences_c s) + (occurrences_c t).
Proof.
induction s.
simpl.
reflexivity.
intro.
destruct a.
simpl.
rewrite IHs.
reflexivity.
simpl.
rewrite IHs.
reflexivity.
Qed.